/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Random;

public class CountingCards {

    // This is the first unoptimized shuffle
    public static int[] firstShuffle(int[] array) {
        int[] copy = new int[array.length];
        boolean[] used = new boolean[array.length];
        Random rand = new Random();
        int n = array.length;

        while (n > 0) {
            int i = rand.nextInt(array.length);

            if (!used[i]) {
                copy[array.length - n] = array[i];
                used[i] = true;
                n--;
            }
        }

        return copy;
    }

    // This is the second optimized shuffle
    public static int[] secondShuffle(int[] array) {
        int[] copy = new int[array.length];
        int[] temp = array.clone();
        Random rand = new Random();
        int n = array.length;

        for (int j = 0; j < copy.length; j++) {
            int i = rand.nextInt(n--);

            copy[j] = temp[i];

            System.arraycopy(temp, i + 1, temp, i, n - i);
        }

        return copy;
    }

    // This is the Fisher-Yates shuffle
    public static void thirdShuffle(int[] array) {
        Random rand = new Random();
        int m = array.length;

        while (m > 0) {
            int i = rand.nextInt(m--); 

            int t = array[m];
            array[m] = array[i];
            array[i] = t;
        }
    }
}
