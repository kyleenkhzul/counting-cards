/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Arrays;
import java.util.Random;

public class CountingCards {

    // This is the first unoptimized shuffle
    public static int[] firstShuffle(int[] array) {
        int[] copy = new int[array.length];
        boolean[] used = new boolean[array.length];
        Random rand = new Random();
        int n = array.length;

        while (n > 0) {
            int i = rand.nextInt(array.length);

            if (!used[i]) {
                copy[array.length - n] = array[i];
                used[i] = true;
                n--;
            }
        }

        return copy;
    }

    // This is the second optimized shuffle
    public static int[] secondShuffle(int[] array) {
        int[] copy = new int[array.length];
        int[] temp = array.clone();
        Random rand = new Random();
        int n = array.length;

        for (int j = 0; j < copy.length; j++) {
            int i = rand.nextInt(n--);

            copy[j] = temp[i];

            System.arraycopy(temp, i + 1, temp, i, n - i);
        }

        return copy;
    }

    // This is the Fisher-Yates shuffle
    public static void thirdShuffle(int[] array) {
        Random rand = new Random();
        int m = array.length;

        while (m > 0) {
            int i = rand.nextInt(m--); 

            int t = array[m];
            array[m] = array[i];
            array[i] = t;
        }
    }

    public static void main(String[] args) {
        long startTime, endTime, executionTime;
        int[] shuffled;
        final int[] ARRAY_1 = {1, 2, 3, 4, 5};
        final int[] ARRAY_2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        final int[] ARRAY_3 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150};

        // TESTING SMALL ARRAY

        System.out.print("Testing times for a small array...\n");
        System.out.println("----------------------------------------------------");

        // Testing times for first shuffle
        System.out.println("First Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = firstShuffle(ARRAY_1);

        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_1));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.println("Execution time of shuffle: " + executionTime + " nanoseconds\n");

        // Testing times for second shuffle
        System.out.println("Second Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = secondShuffle(ARRAY_1);

        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_1));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.println("Execution time of shuffle: " + executionTime + " nanoseconds\n");

        // Testing times for third shuffle
        System.out.println("Third Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = ARRAY_1.clone();
        thirdShuffle(shuffled);

        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_1));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.print("Execution time of shuffle: " + executionTime + " nanoseconds\n");
        System.out.println("----------------------------------------------------\n");


        // TESTING MEDIUM ARRAY

        System.out.print("Testing times for a medium array...\n");
        System.out.println("----------------------------------------------------");

        // Testing times for first shuffle
        System.out.println("First Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = firstShuffle(ARRAY_2);

        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_2));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.println("Execution time of shuffle: " + executionTime + " nanoseconds\n");

        // Testing times for second shuffle
        System.out.println("Second Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = secondShuffle(ARRAY_2);
    
        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_2));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.println("Execution time of shuffle: " + executionTime + " nanoseconds\n");

        // Testing times for third shuffle
        System.out.println("Third Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = ARRAY_2.clone();
        thirdShuffle(shuffled);

        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_2));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.print("Execution time of shuffle: " + executionTime + " nanoseconds\n");
        System.out.println("----------------------------------------------------\n");


        // TESTING LARGE ARRAY

        System.out.print("Testing times for a large array...\n");
        System.out.println("----------------------------------------------------");

        // Testing times for first shuffle
        System.out.println("First Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = firstShuffle(ARRAY_3);

        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_3));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.println("Execution time of shuffle: " + executionTime + " nanoseconds\n");

        // Testing times for second shuffle
        System.out.println("Second Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = secondShuffle(ARRAY_3);

        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_3));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.println("Execution time of shuffle: " + executionTime + " nanoseconds\n");

        // Testing times for third shuffle
        System.out.println("Third Shuffle: ");
        startTime = System.nanoTime();
        
        shuffled = ARRAY_3.clone();
        thirdShuffle(shuffled);

        endTime = System.nanoTime();
        executionTime = endTime - startTime;

        System.out.println("Original: " + Arrays.toString(ARRAY_3));
        System.out.println("Shuffled: " + Arrays.toString(shuffled));
        System.out.print("Execution time of shuffle: " + executionTime + " nanoseconds\n");
        System.out.println("----------------------------------------------------");
    }
}
    

